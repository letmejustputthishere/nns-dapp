{
  "compilerOptions": {
    "moduleResolution": "node",
    "target": "es2020",
    "module": "es2020",
    /**
     * svelte-preprocess cannot figure out whether you have
     * a value or a type, so tell TypeScript to enforce using
     * `import type` instead of `import` for Types.
     * "importsNotUsedAsValues": "error",
     */
    "importsNotUsedAsValues": "remove",
    "resolveJsonModule": true,
    /* changed to false to support the api */
    "isolatedModules": false,
    /**
     * To have warnings / errors of the Svelte compiler at the
     * correct position, enable source maps by default.
     */
    "sourceMap": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    /**
     * Typecheck JS in `.svelte` and `.js` files by default.
     * Disable checkJs if you'd like to use dynamic types in JS.
     * Note that setting allowJs false does not prevent the use
     * of JS in `.svelte` files.
     */
    "allowJs": true,
    "checkJs": true,
    "outDir": "dist",
    "types": [
      "vite/client"
    ],
    "paths": {
      "canisters/testnet/nns-dapp": [
        "../../.dfx/testnet/canisters/nns-dapp/"
      ]
    }
  },
  /**
   * Use global.d.ts instead of compilerOptions.types
   * to avoid limiting type declarations.
   */
  "include": ["src/**/*.d.ts", "src/**/*.ts", "src/**/*.js", "src/**/*.svelte"]
}
